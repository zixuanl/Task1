# Defines which nodes are used in the system and how to connect to them.
# This element should only be referenced during the constructor's initial
# setup.
# All names must be unique.
# No other nodes are known.
# These names will be used for src and dest addresses for the Message
# The local nodeâ€™s name is included in this list
configuration :
  - name : alice
    ip   : 127.0.0.1
    port : 12344
  - name : bob
    ip   : 127.0.0.1
    port : 14255
  - name : charlie
    ip   : 127.0.0.1
    port : 12998
  - name : daphnie
    ip   : 127.0.0.1
    port : 15555
  - name : edward
    ip   : 127.0.0.1
    port : 20000
  - name : frank
    ip   : 127.0.0.1
    port : 30432
  - name : guy
    ip   : 127.0.0.1
    port : 44385


groups :
  - name : group1
    members :
      - alice
      - bob
      - charlie
  - name : group2
    members :
      - bob
      - daphnie
      - frank
  - name : group3
    members :
      - charlie
      - edward
      - frank
  - name : group4
    members :
      - alice
      - edward
      - daphnie
  - name : group5
    members :
      - bob
      - edward
      - guy
  - name : group6
    members :
      - frank
      - guy
      - alice
  - name : group7
    members :
      - daphnie
      - guy
      - charlie


logger :
  - ip : 127.0.0.1
    port : 3333

# This is the incoming port on which MP will listen
# May be changed for further communication as usual
sendRules :
   - action : delay
     src    : alice
     seqNum : 100

# With this receiveRules. We can test reliability & causability by:
# 1. alice multicasts to group1:
#       alice shows 100
#       bob drops (A) then delays (C)
#       charlie shows 100
# 2. charlie multicasts to group1:
#       alice shows 101
#       bob delays (C) then drop (A)
#       charlie shows 101
# 3. alice multicasts to group1:
#       alice shows 201
#       bob drops (A) then shows 100 101 201, all from charlie
#           // because delay rules no more valid at seqNum == 3
#       charlie shows 201


# Withe these rules:
# A request multicast to A and B and C.  B -> Ack A    C -> Ack A  unique message
#
# B request multicast to A and B and C.  
# B and C got it put into queue. A delay from B and drop from C
# 
# delete these rules
#
# C request multicast to A and B and C.  A and B and C got it. A should deliver  
# the request of B first and then the request from C
# 
#


receiveRules :
  - action : delay
    src    : bob
    kind   : multicastRequest12345

#  - action : drop
#    src    : charlie
#    dest   : alice
#    kind   : multicastRequest


